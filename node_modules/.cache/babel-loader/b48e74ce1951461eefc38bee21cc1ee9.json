{"ast":null,"code":"import _classCallCheck from \"/Users/zs/Desktop/JobSearch/AppleAssesment/react-apollo-client-example/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/zs/Desktop/JobSearch/AppleAssesment/react-apollo-client-example/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/zs/Desktop/JobSearch/AppleAssesment/react-apollo-client-example/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/zs/Desktop/JobSearch/AppleAssesment/react-apollo-client-example/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/zs/Desktop/JobSearch/AppleAssesment/react-apollo-client-example/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _taggedTemplateLiteral from \"/Users/zs/Desktop/JobSearch/AppleAssesment/react-apollo-client-example/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/zs/Desktop/JobSearch/AppleAssesment/react-apollo-client-example/src/components/repos/index.js\";\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation($id: ID!) {\\n    addStar(input: { starrableId: $id }) {\\n      starrable {\\n        id\\n        viewerHasStarred\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  {\\n    organization(login: \\\"the-road-to-learn-react\\\") {\\n      repositories(first: 20) {\\n        edges {\\n          node {\\n            id\\n            name\\n            url\\n            viewerHasStarred\\n          }\\n        }\\n      }\\n      __typename\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport gql from 'graphql-tag';\nimport { Query, Mutation } from 'react-apollo';\nimport './index.css';\nvar GET_REPOSITORIES_OF_ORGANIZATION = gql(_templateObject());\nvar STAR_REPOSITORY = gql(_templateObject2());\n\nvar App = function App() {\n  return React.createElement(Query, {\n    query: GET_REPOSITORIES_OF_ORGANIZATION,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, function (_ref) {\n    var organization = _ref.data.organization,\n        loading = _ref.loading;\n\n    if (loading || !organization) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, \"Loading ...\");\n    }\n\n    return React.createElement(Repositories, {\n      repositories: organization.repositories,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    });\n  });\n};\n\nvar Repositories =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Repositories, _React$Component);\n\n  function Repositories() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Repositories);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Repositories)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      selectedRepositoryIds: []\n    };\n\n    _this.toggleSelectRepository = function (id, isSelected) {\n      var selectedRepositoryIds = _this.state.selectedRepositoryIds;\n      selectedRepositoryIds = isSelected ? selectedRepositoryIds.filter(function (itemId) {\n        return itemId !== id;\n      }) : selectedRepositoryIds.concat(id);\n\n      _this.setState({\n        selectedRepositoryIds: selectedRepositoryIds\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Repositories, [{\n    key: \"render\",\n    value: function render() {\n      console.log(this.props.repositories);\n      return React.createElement(RepositoryList, {\n        repositories: this.props.repositories,\n        selectedRepositoryIds: this.state.selectedRepositoryIds,\n        toggleSelectRepository: this.toggleSelectRepository,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return Repositories;\n}(React.Component);\n\nvar RepositoryList = function RepositoryList(_ref2) {\n  var repositories = _ref2.repositories,\n      selectedRepositoryIds = _ref2.selectedRepositoryIds,\n      toggleSelectRepository = _ref2.toggleSelectRepository;\n  return React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, repositories.edges.map(function (_ref3) {\n    var node = _ref3.node;\n    var isSelected = selectedRepositoryIds.includes(node.id);\n    var rowClassName = ['row'];\n\n    if (isSelected) {\n      rowClassName.push('row_selected');\n    }\n\n    return React.createElement(\"li\", {\n      className: rowClassName.join(' '),\n      key: node.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(Select, {\n      id: node.id,\n      isSelected: isSelected,\n      toggleSelectRepository: toggleSelectRepository,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }), ' ', React.createElement(\"a\", {\n      href: node.url,\n      target: \"_blank\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, \" \", node.name, \" \"), \"  \", ' ', !node.viewerHasStarred && React.createElement(Star, {\n      id: node.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }));\n  }));\n};\n\nvar Star = function Star(_ref4) {\n  var id = _ref4.id;\n  return React.createElement(Mutation, {\n    mutation: STAR_REPOSITORY,\n    variables: {\n      id: id\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, function (starRepository) {\n    return React.createElement(\"button\", {\n      type: \"button\",\n      onClick: starRepository,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, \"Star\");\n  });\n};\n\nvar Select = function Select(_ref5) {\n  var id = _ref5.id,\n      isSelected = _ref5.isSelected,\n      toggleSelectRepository = _ref5.toggleSelectRepository;\n  return React.createElement(\"button\", {\n    type: \"button\",\n    onClick: function onClick() {\n      return toggleSelectRepository(id, isSelected);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, isSelected ? 'Unselect' : 'Select');\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/zs/Desktop/JobSearch/AppleAssesment/react-apollo-client-example/src/components/repos/index.js"],"names":["React","gql","Query","Mutation","GET_REPOSITORIES_OF_ORGANIZATION","STAR_REPOSITORY","App","organization","data","loading","repositories","Repositories","state","selectedRepositoryIds","toggleSelectRepository","id","isSelected","filter","itemId","concat","setState","console","log","props","Component","RepositoryList","edges","map","node","includes","rowClassName","push","join","url","name","viewerHasStarred","Star","starRepository","Select"],"mappings":"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","sourcesContent":["import React from 'react';\nimport gql from 'graphql-tag';\nimport { Query, Mutation } from 'react-apollo';\nimport './index.css';\n\nconst GET_REPOSITORIES_OF_ORGANIZATION = gql`\n  {\n    organization(login: \"the-road-to-learn-react\") {\n      repositories(first: 20) {\n        edges {\n          node {\n            id\n            name\n            url\n            viewerHasStarred\n          }\n        }\n      }\n      __typename\n    }\n  }\n`;\n\nconst STAR_REPOSITORY = gql`\n  mutation($id: ID!) {\n    addStar(input: { starrableId: $id }) {\n      starrable {\n        id\n        viewerHasStarred\n      }\n    }\n  }\n`;\n\nconst App = () => (\n  <Query query={GET_REPOSITORIES_OF_ORGANIZATION}>\n    {({ data: { organization }, loading }) => {\n      if (loading || !organization) {\n        return <div>Loading ...</div>;\n      }\n\n      return (\n        <Repositories repositories={organization.repositories} />\n      );\n    }}\n  </Query>\n\n\n);\n\nclass Repositories extends React.Component {\n  state = {\n    selectedRepositoryIds: [],\n  };\n\n  toggleSelectRepository = (id, isSelected) => {\n    let { selectedRepositoryIds } = this.state;\n\n    selectedRepositoryIds = isSelected\n      ? selectedRepositoryIds.filter(itemId => itemId !== id)\n      : selectedRepositoryIds.concat(id);\n\n    this.setState({ selectedRepositoryIds });\n  };\n\n  render() {\n    console.log(this.props.repositories)\n    return (\n      \n      <RepositoryList\n        repositories={this.props.repositories}\n        selectedRepositoryIds={this.state.selectedRepositoryIds}\n        toggleSelectRepository={this.toggleSelectRepository}\n      />\n    );\n  }\n}\n\nconst RepositoryList = ({\n  repositories,\n  selectedRepositoryIds,\n  toggleSelectRepository,\n}) => (\n  <ul>\n    {repositories.edges.map(({ node }) => {\n      const isSelected = selectedRepositoryIds.includes(node.id);\n\n      const rowClassName = ['row'];\n\n      if (isSelected) {\n        rowClassName.push('row_selected');\n      }\n\n      return (\n        <li className={rowClassName.join(' ')} key={node.id}>\n          <Select\n            id={node.id}\n            isSelected={isSelected}\n            toggleSelectRepository={toggleSelectRepository}\n          />{' '}\n          <a href={node.url} target={ \"_blank\" }> {node.name} </a>  {' '}\n          {!node.viewerHasStarred && <Star id={node.id} />}\n        </li>\n      );\n    })}\n  </ul>\n);\n\nconst Star = ({ id }) => (\n  <Mutation mutation={STAR_REPOSITORY} variables={{ id }}>\n    {starRepository => (\n      <button type=\"button\" onClick={starRepository}>\n        Star\n      </button>\n    )}\n  </Mutation>\n);\n\nconst Select = ({ id, isSelected, toggleSelectRepository }) => (\n  <button\n    type=\"button\"\n    onClick={() => toggleSelectRepository(id, isSelected)}\n  >\n    {isSelected ? 'Unselect' : 'Select'}\n  </button>\n);\n\nexport default App;\n\n"]},"metadata":{},"sourceType":"module"}