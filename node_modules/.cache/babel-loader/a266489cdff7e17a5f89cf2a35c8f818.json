{"ast":null,"code":"import _classCallCheck from \"/Users/zs/Desktop/JobSearch/AppleAssesment/react-apollo-client-example/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/zs/Desktop/JobSearch/AppleAssesment/react-apollo-client-example/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/zs/Desktop/JobSearch/AppleAssesment/react-apollo-client-example/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/zs/Desktop/JobSearch/AppleAssesment/react-apollo-client-example/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/zs/Desktop/JobSearch/AppleAssesment/react-apollo-client-example/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _taggedTemplateLiteral from \"/Users/zs/Desktop/JobSearch/AppleAssesment/react-apollo-client-example/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/zs/Desktop/JobSearch/AppleAssesment/react-apollo-client-example/src/components/repos/index.js\";\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation($id: ID!) {\\n    removeStar(input: { starrableId: $id }) {\\n      starrable {\\n        id\\n        viewerHasStarred\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation($id: ID!) {\\n    addStar(input: { starrableId: $id }) {\\n      starrable {\\n        id\\n        viewerHasStarred\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  {\\n    organization(login: \\\"the-road-to-learn-react\\\") {\\n      repositories(first: 20) {\\n        edges {\\n          node {\\n            id\\n            name\\n            url\\n            viewerHasStarred\\n            forkCount\\n            stargazers {\\n              totalCount\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport gql from 'graphql-tag';\nimport { Query, Mutation } from 'react-apollo';\nimport './index.css';\nvar GET_REPOSITORIES_OF_ORGANIZATION = gql(_templateObject());\nvar STAR_REPOSITORY = gql(_templateObject2()); // I created this mutation to update the database when a user clicks the button to remove a star\n\nvar UNSTAR_REPOSITORY = gql(_templateObject3());\n\nvar App = function App() {\n  return React.createElement(Query, {\n    query: GET_REPOSITORIES_OF_ORGANIZATION,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, function (_ref) {\n    var organization = _ref.data.organization,\n        loading = _ref.loading;\n\n    if (loading || !organization) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, \"Loading ...\");\n    }\n\n    return React.createElement(Repositories, {\n      repositories: organization.repositories,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    });\n  });\n};\n\nvar Repositories =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Repositories, _React$Component);\n\n  function Repositories() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Repositories);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Repositories)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      selectedRepositoryIds: []\n    };\n\n    _this.toggleSelectRepository = function (id, isSelected) {\n      var selectedRepositoryIds = _this.state.selectedRepositoryIds;\n      selectedRepositoryIds = isSelected ? selectedRepositoryIds.filter(function (itemId) {\n        return itemId !== id;\n      }) : selectedRepositoryIds.concat(id);\n\n      _this.setState({\n        selectedRepositoryIds: selectedRepositoryIds\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Repositories, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(RepositoryList, {\n        repositories: this.props.repositories,\n        selectedRepositoryIds: this.state.selectedRepositoryIds,\n        toggleSelectRepository: this.toggleSelectRepository,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return Repositories;\n}(React.Component);\n\nvar RepositoryList = function RepositoryList(_ref2) {\n  var repositories = _ref2.repositories,\n      selectedRepositoryIds = _ref2.selectedRepositoryIds,\n      toggleSelectRepository = _ref2.toggleSelectRepository;\n  return React.createElement(\"ul\", {\n    className: \"ul-list\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, repositories.edges.map(function (_ref3) {\n    var node = _ref3.node;\n    var isSelected = selectedRepositoryIds.includes(node.id);\n    var rowClassName = ['row'];\n\n    if (isSelected) {\n      rowClassName.push('row_selected');\n    }\n\n    return React.createElement(\"li\", {\n      className: rowClassName.join(' '),\n      key: node.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(Select, {\n      id: node.id,\n      isSelected: isSelected,\n      toggleSelectRepository: toggleSelectRepository,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }), ' ', \" \", React.createElement(Forked, {\n      forked: node.forkCount,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }), React.createElement(\"a\", {\n      href: node.url // I added this so that when the user clicks the link it will open a new tap instead of navigating to the repo in the existing tab.\n      ,\n      target: \"_blank\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, \" \", node.name, \" \"), \"  \", ' ', React.createElement(Star, {\n      id: node.id,\n      starred: node.viewerHasStarred,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }));\n  }));\n};\n\nvar Forked = function Forked(_ref4) {\n  var id = _ref4.id,\n      forked = _ref4.forked;\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, \"FORKED: \", forked);\n};\n\nvar Star = function Star(_ref5) {\n  var id = _ref5.id,\n      starred = _ref5.starred;\n\n  // I added this if statement for toggleing the starred button. It checks if the user has starred the repo and executes the appropriate function. \n  if (starred) {\n    return (// This runs in the case of the user unstarring a repo. It takes in the unstar mutation function  definned above and updates the database via apollo/graphQL. I have created a seperate mutation above to accomplush this.\n      React.createElement(Mutation, {\n        mutation: UNSTAR_REPOSITORY,\n        variables: {\n          id: id\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, function (unStarRepository) {\n        return React.createElement(\"button\", {\n          id: \"btn-unstar\",\n          type: \"button\",\n          onClick: unStarRepository,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 132\n          },\n          __self: this\n        }, \"UnStar\");\n      })\n    );\n  } else {\n    return (// This mutation takes in the add star function and updates the database via apollo/graphQL.\n      React.createElement(Mutation, {\n        mutation: STAR_REPOSITORY,\n        variables: {\n          id: id\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, function (starRepository) {\n        return React.createElement(\"button\", {\n          id: \"btn-star\",\n          type: \"button\",\n          onClick: starRepository,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 145\n          },\n          __self: this\n        }, \"Star\");\n      })\n    );\n  }\n};\n\nvar Select = function Select(_ref6) {\n  var id = _ref6.id,\n      isSelected = _ref6.isSelected,\n      toggleSelectRepository = _ref6.toggleSelectRepository;\n  return React.createElement(\"button\", {\n    id: \"btn-select\",\n    type: \"button\",\n    onClick: function onClick() {\n      return toggleSelectRepository(id, isSelected);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }, isSelected ? 'Unselect' : 'Select');\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/zs/Desktop/JobSearch/AppleAssesment/react-apollo-client-example/src/components/repos/index.js"],"names":["React","gql","Query","Mutation","GET_REPOSITORIES_OF_ORGANIZATION","STAR_REPOSITORY","UNSTAR_REPOSITORY","App","organization","data","loading","repositories","Repositories","state","selectedRepositoryIds","toggleSelectRepository","id","isSelected","filter","itemId","concat","setState","props","Component","RepositoryList","edges","map","node","includes","rowClassName","push","join","forkCount","url","name","viewerHasStarred","Forked","forked","Star","starred","unStarRepository","starRepository","Select"],"mappings":"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","sourcesContent":["import React from 'react';\nimport gql from 'graphql-tag';\nimport { Query, Mutation } from 'react-apollo';\nimport './index.css';\n\nconst GET_REPOSITORIES_OF_ORGANIZATION = gql`\n  {\n    organization(login: \"the-road-to-learn-react\") {\n      repositories(first: 20) {\n        edges {\n          node {\n            id\n            name\n            url\n            viewerHasStarred\n            forkCount\n            stargazers {\n              totalCount\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst STAR_REPOSITORY = gql`\n  mutation($id: ID!) {\n    addStar(input: { starrableId: $id }) {\n      starrable {\n        id\n        viewerHasStarred\n      }\n    }\n  }\n`;\n// I created this mutation to update the database when a user clicks the button to remove a star\nconst UNSTAR_REPOSITORY = gql`\n  mutation($id: ID!) {\n    removeStar(input: { starrableId: $id }) {\n      starrable {\n        id\n        viewerHasStarred\n      }\n    }\n  }\n`;\n\nconst App = () => (\n  <Query query={GET_REPOSITORIES_OF_ORGANIZATION}>\n    {({ data: { organization }, loading }) => {\n      if (loading || !organization) {\n        return <div>Loading ...</div>;\n      }\n      return (\n        <Repositories repositories={organization.repositories} />\n      );\n    }}\n  </Query>\n);\n\nclass Repositories extends React.Component {\n  state = {\n    selectedRepositoryIds: [],\n  };\n\n  toggleSelectRepository = (id, isSelected) => {\n    let { selectedRepositoryIds } = this.state;\n\n    selectedRepositoryIds = isSelected\n      ? selectedRepositoryIds.filter(itemId => itemId !== id)\n      : selectedRepositoryIds.concat(id);\n\n    this.setState({ selectedRepositoryIds });\n  };\n\n  render() {\n    return (\n      \n      <RepositoryList\n        repositories={this.props.repositories}\n        selectedRepositoryIds={this.state.selectedRepositoryIds}\n        toggleSelectRepository={this.toggleSelectRepository}\n      />\n    );\n  }\n}\n\nconst RepositoryList = ({\n  repositories,\n  selectedRepositoryIds,\n  toggleSelectRepository,\n}) => (\n  <ul className=\"ul-list\">\n    {repositories.edges.map(({ node }) => {\n      const isSelected = selectedRepositoryIds.includes(node.id);\n\n      const rowClassName = ['row'];\n\n      if (isSelected) {\n        rowClassName.push('row_selected');\n      }\n\n      return (\n        <li className={rowClassName.join(' ')} key={node.id}>\n          <Select\n            id={node.id}\n            isSelected={isSelected}\n            toggleSelectRepository={toggleSelectRepository}\n          />{' '} <Forked  forked={node.forkCount} />\n          <a \n            href={node.url} \n            // I added this so that when the user clicks the link it will open a new tap instead of navigating to the repo in the existing tab.\n            target={ \"_blank\" }> {node.name} </a>  {' '}\n          <Star id={node.id} starred={node.viewerHasStarred} />\n         \n        </li>\n      );\n    })}\n  </ul>\n);\nconst Forked = ({ id, forked}) => (\n  <div>FORKED: { forked }</div>\n);\nconst Star = ({ id, starred }) => {\n  // I added this if statement for toggleing the starred button. It checks if the user has starred the repo and executes the appropriate function. \n  if (starred) {\n    return (\n      // This runs in the case of the user unstarring a repo. It takes in the unstar mutation function  definned above and updates the database via apollo/graphQL. I have created a seperate mutation above to accomplush this.\n      <Mutation mutation={UNSTAR_REPOSITORY} variables={{ id }}>\n        {unStarRepository => (\n          <button \n            id=\"btn-unstar\" \n            type=\"button\" \n            onClick={unStarRepository}\n          >UnStar</button>\n        )}\n      </Mutation>\n    );\n  } else {\n      return (\n        // This mutation takes in the add star function and updates the database via apollo/graphQL.\n      <Mutation mutation={STAR_REPOSITORY} variables={{ id }}>\n        {starRepository => (\n          <button \n            id=\"btn-star\" \n            type=\"button\" \n            onClick={starRepository}\n          >Star</button>\n        )}\n      </Mutation>)\n  }\n};\n\nconst Select = ({ id, isSelected, toggleSelectRepository }) => (\n  <button\n    id=\"btn-select\"\n    type=\"button\"\n    onClick={() => toggleSelectRepository(id, isSelected)}\n  >\n    {isSelected ? 'Unselect' : 'Select'}\n  </button>\n);\n\n\nexport default App;\n\n"]},"metadata":{},"sourceType":"module"}