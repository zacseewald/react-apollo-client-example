{"ast":null,"code":"var toString = Object.prototype.toString;\nexport function cloneDeep(value) {\n  return cloneDeepHelper(value, new Map());\n}\n\nfunction cloneDeepHelper(val, seen) {\n  switch (toString.call(val)) {\n    case \"[object Array]\":\n      {\n        if (seen.has(val)) return seen.get(val);\n        var copy_1 = val.slice(0);\n        seen.set(val, copy_1);\n        copy_1.forEach(function (child, i) {\n          copy_1[i] = cloneDeepHelper(child, seen);\n        });\n        return copy_1;\n      }\n\n    case \"[object Date]\":\n      return new Date(+val);\n\n    case \"[object Object]\":\n      {\n        if (seen.has(val)) return seen.get(val);\n        var copy_2 = Object.create(Object.getPrototypeOf(val));\n        seen.set(val, copy_2);\n\n        if (typeof Object.getOwnPropertyDescriptor === \"function\") {\n          var handleKey = function handleKey(key) {\n            var desc = Object.getOwnPropertyDescriptor(val, key);\n            desc.value = cloneDeepHelper(val[key], seen);\n            Object.defineProperty(copy_2, key, desc);\n          };\n\n          Object.getOwnPropertyNames(val).forEach(handleKey);\n\n          if (typeof Object.getOwnPropertySymbols === \"function\") {\n            Object.getOwnPropertySymbols(val).forEach(handleKey);\n          }\n        } else {\n          Object.keys(val).forEach(function (key) {\n            copy_2[key] = cloneDeepHelper(val[key], seen);\n          });\n        }\n\n        return copy_2;\n      }\n\n    default:\n      return val;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}